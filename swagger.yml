openapi: 3.0.0
info:
  title: 海外副業サイト
  description: |-
    This is a sample Job Site.
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /
tags:
  - name: user
    description: Operations about user
  - name: job
    description: Everything about your Jobs
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /user:
    get:
      tags:
        - user
      summary: Get user by user ID
      description: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 10
                email: test@example.com
                name: testuser
                user_status_id: 1
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: test@example.com
              password: '12345'
              name: testuser
              user_status_id: 1
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                email: test@example.com
                name: testuser
                user_status_id: 1
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      requestBody:
        description: Update an existing user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: test@example.com
              password: '12345'
              name: testuser
              user_status_id: 1
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 10
                email: test@example.com
                name: testuser
                user_status_id: 1
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      responses:
        '200':
          description: Delete Succeed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /user/login:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: test@example.com
              password: '12345'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: "your-auth-token"
          headers:
            Set-Cookie:
              description: Authentication token
              schema:
                type: string
        '400':
          description: Invalid input
  /user/logout:
    post:
      tags:
        - user
      summary: User Logout
      description: Perform user logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '400':
          description: Invalid input
  /job:
    get:
      tags:
        - job
      summary: Find job by ID
      description: Returns a single job
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              example:
                - id: 1
                  title: フロントエンド開発者募集
                  price: ¥7,500,000/年
                  company:
                    id: 1,
                    name: Job Ltd
                    address: アメリカ合衆国
                  category:
                    id: 1,
                    name: フロントエンド開発
                - id: 2
                  title: バックエンド開発者募集
                  price: ¥8,500,000/年
                  company:
                    id: 1,
                    name: Job Ltd
                    address: アメリカ合衆国
                  category:
                    id: 1,
                    name: フロントエンド開発
            application/xml:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Invalid ID supplied
        '404':
          description: Job not found
  /job/{jobId}:
    get:
      tags:
        - job
      summary: Find job by ID
      description: Returns a single job
      operationId: getJobById
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              example:
                id: 1
                title: フロントエンド開発者募集
                body: 現在フロントエンド開発者募集を募集しております。大規模開発の...
                price: ¥7,500,000/年
                company:
                  id: 1,
                  name: Job Ltd
                  address: アメリカ合衆国
                category:
                  id: 1,
                  name: フロントエンド開発
                url: http://job.company.example.com/job/100
        '400':
          description: Invalid ID supplied
        '404':
          description: Job not found
components:
  schemas:
    User:
      required:
        - id
        - email
        - password
        - name
        - user_status_id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: '12345'
        name:
          type: string
          example: testuser
        user_status_id:
          $ref: '#/components/schemas/UserStatus/properties/id'
    UserStatus:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
          enum:
            - 0
            - 1
            - 2
        name:
          type: string
          description: Order Status
          example: 無料
          enum:
            - 管理者
            - 無料
            - 有料
    Job:
      required:
        - id
        - site_id
        - url
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        site_id:
          $ref: '#/components/schemas/Site/properties/id'
        url:
          type: string
          example: http://job-company.example.com
        content:
          type: string
          example: |
            <!doctype html>
              <head><title>Proposals</title></head>
              <body></body>
            </html>
    HtmlTag:
      required:
        - id
        - job_id
        - language_id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        job_id:
          $ref: '#/components/schemas/Job/properties/id'
        title:
          type: string
          example: doggie
        body:
          type: string
          example: doggie
        language_id:
          $ref: '#/components/schemas/Language/properties/id'
    Item:
      required:
        - id
        - html_tag_id
        - language_id
        - company_id
        - category_id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        html_tag_id:
          $ref: '#/components/schemas/HtmlTag/properties/id'
        title:
          type: string
          example: doggie
        body:
          type: string
          example: doggie
        company_id:
          $ref: '#/components/schemas/Company/properties/id'
        price:
          type: integer
          format: int64
          example: 1
        category_id:
          $ref: '#/components/schemas/Category/properties/id'
    Site:
      required:
        - id
        - name
        - home_url
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: testuser
        home_url:
          type: string
          example: testuser
    Company:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Category:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Language:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  requestBodies:
    Job:
      description: Job object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Job'
        application/xml:
          schema:
            $ref: '#/components/schemas/Job'
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /auth
          scopes:
            write:user: modify your account
            read:user: read user
    api_key:
      type: apiKey
      name: api_key
      in: header
